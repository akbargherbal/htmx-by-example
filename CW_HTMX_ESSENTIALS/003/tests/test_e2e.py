# This file contains the end-to-end (E2E) tests for the application.
# As a Principal Engineer, I stress that E2E tests are the ultimate proof that the
# frontend and backend are correctly integrated. These tests use Playwright to
# control a real browser, simulating user actions and asserting on the final UI state.

# Core Principles Followed:
# 1.  **User-Centric**: Tests are written from the user's perspective (click a link, see new content).
# 2.  **`data-testid` Selectors**: We exclusively use `data-testid` attributes for selecting elements.
#     This decouples tests from fragile selectors like CSS classes or text content, making them more robust.
# 3.  **`expect` Assertions**: We use Playwright's `expect()` for assertions. It has built-in
#     auto-waiting, which makes tests more reliable by waiting for elements to appear or states to change.
# 4.  **Verify Backend Contract**: Assertions check for the specific HTML content that the backend
#     is known to return, confirming the full system integration.

from playwright.sync_api import Page, expect

# The `live_server` fixture is automatically provided by conftest.py
# The `page` fixture is automatically provided by pytest-playwright.

def test_e2e_exhibit_navigation_updates_content_and_url(page: Page, live_server):
    """
    Verifies that clicking an exhibit link (powered by hx-boost) correctly
    updates the main content area and pushes the new URL to the browser history.
    """
    # 1. Arrange: Navigate to the running application's main page.
    page.goto("http://127.0.0.1:8000")

    # 2. Act: Simulate a user clicking the "Surrealism" link.
    # We use the unique data-testid generated by our Jinja2 template.
    page.get_by_test_id("exhibit-link-surrealism").click()

    # 3. Assert: Verify the UI has updated as expected.
    # Assert that the browser URL was updated by hx-push-url.
    expect(page).to_have_url("http://127.0.0.1:8000/exhibit/surrealism")

    # Find the target content area by its data-testid.
    display_area = page.get_by_test_id("exhibit-display")

    # Assert that the content area now contains the precise HTML fragment
    # returned by the backend for the "surrealism" exhibit.
    expect(display_area.locator("h3")).to_have_text("Exhibit: Surrealism")
    expect(display_area.locator("p")).to_contain_text("A cultural movement which developed in Europe")
    expect(display_area.locator("code")).to_have_text("/exhibit/surrealism")

def test_e2e_request_from_archives_shows_result(page: Page, live_server):
    """
    Verifies that clicking the 'Request Piece from Archives' button triggers a
    POST request and the UI is correctly updated with the response from the server.
    """
    # 1. Arrange: Navigate to the main page.
    page.goto("http://127.0.0.1:8000")

    # 2. Act: Click the request button. Playwright's click will wait for the
    # HTMX request to complete and the DOM to be updated.
    page.get_by_test_id("request-archive-btn").click()

    # 3. Assert: Verify the UI now shows the retrieved piece information.
    # The backend replaces the entire container, so we look for the new content
    # within the updated DOM.
    result_area = page.get_by_test_id("archive-content-area")
    expect(result_area).to_be_visible()
    expect(result_area).to_contain_text("Retrieved: 'The Starry Night' by Vincent van Gogh.")

    # Also verify that the button is still present and enabled, as the backend
    # returns a fresh, usable button in its response fragment.
    expect(page.get_by_test_id("request-archive-btn")).to_be_enabled()

def test_e2e_move_sculpture_shows_confirmation_and_updates_ui(page: Page, live_server):
    """
    Verifies that clicking the 'Move' button first shows a confirmation dialog
    (hx-confirm), and after accepting, updates the UI to show a success message
    and a disabled button.
    """
    # 1. Arrange: Navigate to the main page.
    page.goto("http://127.0.0.1:8000")

    # Set up a listener to automatically accept the next confirmation dialog.
    # This must be done *before* the action that triggers the dialog.
    page.on("dialog", lambda dialog: dialog.accept())

    # 2. Act: Click the button that triggers the hx-confirm dialog.
    page.get_by_test_id("move-sculpture-btn").click()

    # 3. Assert: Verify the UI has been replaced with the success state.
    # The backend returns a new fragment that replaces the original container.
    # We find the new status display by its test-id.
    status_div = page.get_by_test_id("sculpture-status")
    expect(status_div).to_be_visible()

    # Assert that the success message and new location are displayed, matching
    # the backend's response.
    expect(status_div).to_contain_text("Success! Sculpture: 'The Thinker'")
    expect(status_div).to_contain_text("New Location: West Garden")

    # A critical part of this test: verify the button is now disabled to prevent
    # duplicate actions, as specified in the backend's response HTML.
    expect(page.get_by_test_id("move-sculpture-btn")).to_be_disabled()
    expect(page.get_by_test_id("move-sculpture-btn")).to_have_text("Moved")